<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http.Formatting</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.ByteRangeStreamContent">
      <summary>Implementazione <see cref="T:System.Net.Http.HttpContent" /> che fornisce la visualizzazione di un intervallo di byte su un flusso per generare risposte dell'intervallo di byte HTTP 206 (Contenuto parziale).<see cref="T:System.Net.Http.ByteRangeStreamContent" /> supporta uno o più intervalli di byte indipendentemente dal fatto che siano consecutivi o meno.Se esiste un solo intervallo, viene generato un singolo corpo di risposta parziale contenente un'intestazione Content-Range.Se esistono più intervalli viene generata una risposta multipart/byteranges in cui ciascuna parte del corpo contiene un intervallo indicato dal campo dell'intestazione Content-Range associato.</summary>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Implementazione <see cref="T:System.Net.Http.HttpContent" /> che fornisce la visualizzazione di un intervallo di byte su un flusso per generare risposte dell'intervallo di byte HTTP 206 (Contenuto parziale).Se nessuno degli intervalli richiesti si sovrappone all'estensione corrente della risorsa selezionata rappresentata dal parametro content viene generata una <see cref="T:System.Net.Http.InvalidByteRangeException" /> indicante il Content-Range valido del contenuto.</summary>
      <param name="content">Flusso sul quale generare una visualizzazione dell'intervallo di byte.</param>
      <param name="range">Intervallo di intervalli generalmente ottenuto dal campo dell'intestazione della richiesta Range HTTP.</param>
      <param name="mediaType">Media type del flusso di contenuto.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue,System.Int32)">
      <summary>Implementazione <see cref="T:System.Net.Http.HttpContent" /> che fornisce la visualizzazione di un intervallo di byte su un flusso per generare risposte dell'intervallo di byte HTTP 206 (Contenuto parziale).Se nessuno degli intervalli richiesti si sovrappone all'estensione corrente della risorsa selezionata rappresentata dal parametro content viene generata una <see cref="T:System.Net.Http.InvalidByteRangeException" /> indicante il Content-Range valido del contenuto.</summary>
      <param name="content">Flusso sul quale generare una visualizzazione dell'intervallo di byte.</param>
      <param name="range">Intervallo di intervalli generalmente ottenuto dal campo dell'intestazione della richiesta Range HTTP.</param>
      <param name="mediaType">Media type del flusso di contenuto.</param>
      <param name="bufferSize">Dimensione del buffer durante la copia del flusso di contenuto.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.String)">
      <summary>Implementazione <see cref="T:System.Net.Http.HttpContent" /> che fornisce la visualizzazione di un intervallo di byte su un flusso per generare risposte dell'intervallo di byte HTTP 206 (Contenuto parziale).Se nessuno degli intervalli richiesti si sovrappone all'estensione corrente della risorsa selezionata rappresentata dal parametro content viene generata una <see cref="T:System.Net.Http.InvalidByteRangeException" /> indicante il Content-Range valido del contenuto.</summary>
      <param name="content">Flusso sul quale generare una visualizzazione dell'intervallo di byte.</param>
      <param name="range">Intervallo di intervalli generalmente ottenuto dal campo dell'intestazione della richiesta Range HTTP.</param>
      <param name="mediaType">Media type del flusso di contenuto.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.String,System.Int32)">
      <summary>Implementazione <see cref="T:System.Net.Http.HttpContent" /> che fornisce la visualizzazione di un intervallo di byte su un flusso per generare risposte dell'intervallo di byte HTTP 206 (Contenuto parziale).Se nessuno degli intervalli richiesti si sovrappone all'estensione corrente della risorsa selezionata rappresentata dal parametro content viene generata una <see cref="T:System.Net.Http.InvalidByteRangeException" /> indicante il Content-Range valido del contenuto.</summary>
      <param name="content">Flusso sul quale generare una visualizzazione dell'intervallo di byte.</param>
      <param name="range">Intervallo di intervalli generalmente ottenuto dal campo dell'intestazione della richiesta Range HTTP.</param>
      <param name="mediaType">Media type del flusso di contenuto.</param>
      <param name="bufferSize">Dimensione del buffer durante la copia del flusso di contenuto.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.Dispose(System.Boolean)">
      <summary>Rilascia tutte le risorse utilizzate dall'istanza corrente della classe <see cref="T:System.Net.Http.ByteRangeStreamContent" />.</summary>
      <param name="disposing">true per rilasciare sia le risorse gestite sia quelle non gestite. false per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serializza in modo asincrono l'intervallo di byte su un flusso di contenuto HTTP.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="stream">Flusso di destinazione.</param>
      <param name="context">Informazioni sul trasporto.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.TryComputeLength(System.Int64@)">
      <summary>Determina se la lunghezza di un array di byte è valida.</summary>
      <returns>true se la lunghezza è valida. In caso contrario, false.</returns>
      <param name="length">Lunghezza in byte dell'array di byte.</param>
    </member>
    <member name="T:System.Net.Http.HttpClientExtensions">
      <summary>Fornisce metodi di estensione per facilitare la creazione di richieste formattate usando <see cref="T:System.Net.Http.HttpClient" />. </summary>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore fornito serializzato in formato JSON. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore fornito serializzato in formato JSON. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore fornito serializzato in formato XML. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore fornito serializzato in formato XML. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type del contenuto della richiesta. Questo valore può essere null, in questo caso verrà usato il tipo di contenuto predefinito del <paramref name="formatter" />.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type del contenuto della richiesta. Questo valore può essere null, in questo caso verrà usato il tipo di contenuto predefinito del <paramref name="formatter" />.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type del contenuto della richiesta. Questo valore può essere null, in questo caso verrà usato il tipo di contenuto predefinito del <paramref name="formatter" />.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary> Invia una richiesta POST come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore fornito serializzato in formato JSON. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore fornito serializzato in formato JSON. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore fornito serializzato in formato XML. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore fornito serializzato in formato XML. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type del contenuto della richiesta. Questo valore può essere null, in questo caso verrà usato il tipo di contenuto predefinito del <paramref name="formatter" />.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type del contenuto della richiesta. Questo valore può essere null, in questo caso verrà usato il tipo di contenuto predefinito del <paramref name="formatter" />.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type del contenuto della richiesta. Questo valore può essere null, in questo caso verrà usato il tipo di contenuto predefinito del <paramref name="formatter" />.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary> Invia una richiesta PUT come operazione asincrona all'URI specificato con il valore serializzato usando il formattatore fornito. </summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="client">Client usato per creare la richiesta.</param>
      <param name="requestUri">URI a cui viene inviata la richiesta.</param>
      <param name="value">Valore che verrà inserito nel corpo entità della richiesta.</param>
      <param name="formatter">Formattatore usato per serializzare il valore.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato da altri oggetti o thread per ricevere l'avviso di annullamento.</param>
      <typeparam name="T">Tipo di valore.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpClientFactory">
      <summary>Rappresenta la factory per la creazione di nuove istanze di <see cref="T:System.Net.Http.HttpClient" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.DelegatingHandler[])">
      <summary>Crea una nuova istanza di <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>Nuova istanza di <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="handlers">Elenco del gestore HTTP che delega l'elaborazione dei messaggi di risposta HTTP a un altro gestore.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
      <summary>Crea una nuova istanza di <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>Nuova istanza di <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="innerHandler">Gestore interno responsabile dell'elaborazione dei messaggi di risposta HTTP.</param>
      <param name="handlers">Elenco del gestore HTTP che delega l'elaborazione dei messaggi di risposta HTTP a un altro gestore.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.CreatePipeline(System.Net.Http.HttpMessageHandler,System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler})">
      <summary>Crea una nuova istanza di <see cref="T:System.Net.Http.HttpClient" /> da inserire in una pipeline.</summary>
      <returns>Nuova istanza di <see cref="T:System.Net.Http.HttpClient" /> da inserire in una pipeline.</returns>
      <param name="innerHandler">Gestore interno responsabile dell'elaborazione dei messaggi di risposta HTTP.</param>
      <param name="handlers">Elenco del gestore HTTP che delega l'elaborazione dei messaggi di risposta HTTP a un altro gestore.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentExtensions">
      <summary>Specifica i metodi di estensione per consentire la lettura di oggetti fortemente tipizzati da istanze di HttpContent.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
      <summary> Restituisce un'attività che genererà un oggetto del tipo specificato &lt;typeparamref name="T" /&gt; in base all'istanza content. </summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <typeparam name="T">Tipo dell'oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Restituisce un'attività che genererà un oggetto del tipo specificato &lt;typeparamref name="T" /&gt; in base all'istanza content. </summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <typeparam name="T">Tipo dell'oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Restituisce un'attività che genererà un oggetto del tipo specificato &lt;typeparamref name="T" /&gt; in base all'istanza content. </summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <param name="formatterLogger">IFormatterLogger per la registrazione degli eventi.</param>
      <typeparam name="T">Tipo dell'oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content.</summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <param name="formatterLogger">IFormatterLogger per la registrazione degli eventi.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
      <typeparam name="T">Tipo dell'oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)">
      <summary>Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content.</summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
      <typeparam name="T">Tipo dell'oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content.</summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
      <typeparam name="T">Tipo dell'oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
      <summary> Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content. </summary>
      <returns>Attività che genererà un'istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="type">Tipo dell'oggetto da leggere.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content utilizzando uno dei formattatori forniti per deserializzare il contenuto. </summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content utilizzando uno dei formattatori forniti per deserializzare il contenuto. </summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <param name="formatterLogger">IFormatterLogger per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content utilizzando uno dei formattatori forniti per deserializzare il contenuto.</summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <param name="formatterLogger">IFormatterLogger per la registrazione degli eventi.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)">
      <summary>Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content utilizzando uno dei formattatori forniti per deserializzare il contenuto.</summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="formatters">Raccolta di istanze di MediaTypeFormatter da utilizzare.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Threading.CancellationToken)">
      <summary>Restituisce un'attività che genererà un oggetto del tipo specificato in base all'istanza content utilizzando uno dei formattatori forniti per deserializzare il contenuto.</summary>
      <returns>Istanza di oggetto del tipo specificato.</returns>
      <param name="content">Istanza di HttpContent da cui eseguire la lettura.</param>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentFormDataExtensions">
      <summary>Metodi di estensione per la lettura di dati codificati negli URL di form HTML da istanze di <see cref="T:System.Net.Http.HttpContent" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)">
      <summary>Determina se il contenuto specificato è costituito da dati codificati negli URL di form HTML.</summary>
      <returns>true se il contenuto specificato è costituito da dati codificati negli URL di form HTML. In caso contrario, false.</returns>
      <param name="content">Il contenuto.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)">
      <summary>Legge in modalità asincrona i dati codificati negli URL di form HTML da un'istanza di <see cref="T:System.Net.Http.HttpContent" /> e memorizza i risultati in un oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="content">Il contenuto.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Legge in modalità asincrona i dati codificati negli URL di form HTML da un'istanza di <see cref="T:System.Net.Http.HttpContent" /> e memorizza i risultati in un oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="content">Il contenuto.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMessageExtensions">
      <summary>Fornisce metodi di estensione per la lettura di entità <see cref="T:System.Net.Http.HttpRequestMessage" /> e <see cref="T:System.Net.Http.HttpResponseMessage" /> da istanze di <see cref="T:System.Net.Http.HttpContent" />. </summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
      <summary>Determina se il contenuto specificato è il contenuto di un messaggio di richiesta HTTP.</summary>
      <returns>true se il contenuto specificato è il contenuto di un messaggio HTTP. In caso contrario, false.</returns>
      <param name="content">Contenuto da verificare.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
      <summary>Determina se il contenuto specificato è il contenuto di un messaggio di risposta HTTP.</summary>
      <returns>true se il contenuto specificato è il contenuto di un messaggio HTTP. In caso contrario, false.</returns>
      <param name="content">Contenuto da verificare.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)">
      <summary> Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)">
      <summary> Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
      <param name="uriScheme">Schema URI da utilizzare per l'URI della richiesta.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)">
      <summary> Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
      <param name="uriScheme">Schema URI da utilizzare per l'URI della richiesta.</param>
      <param name="bufferSize">Dimensione del buffer.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)">
      <summary>Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
      <param name="uriScheme">Schema URI da utilizzare per l'URI della richiesta.</param>
      <param name="bufferSize">Dimensione del buffer.</param>
      <param name="maxHeaderSize">Lunghezza massima dell'intestazione HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)"></member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)"></member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)">
      <summary> Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)">
      <summary>Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
      <param name="bufferSize">Dimensione del buffer.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)">
      <summary>Legge <see cref="T:System.Net.Http.HttpContent" /> come <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Istanza analizzata di <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="content">Contenuto da leggere.</param>
      <param name="bufferSize">Dimensione del buffer.</param>
      <param name="maxHeaderSize">Lunghezza massima dell'intestazione HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Threading.CancellationToken)"></member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)"></member>
    <member name="T:System.Net.Http.HttpContentMultipartExtensions">
      <summary>Metodi di estensione per la lettura di entità multipart MIME da istanze di <see cref="T:System.Net.Http.HttpContent" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)">
      <summary>Determina se il contenuto specificato è contenuto multipart MIME.</summary>
      <returns>true se il contenuto specificato è contenuto multipart MIME. In caso contrario, false.</returns>
      <param name="content">Il contenuto.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
      <summary>Determina se il contenuto specificato è contenuto multipart MIME con il sottotipo specificato.</summary>
      <returns>true se il contenuto specificato è contenuto multipart MIME con il sottotipo specificato. In caso contrario, false.</returns>
      <param name="content">Il contenuto.</param>
      <param name="subtype">Sottotipo multipart MIME per cui determinare la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
      <summary>Legge tutte le parti del corpo di un messaggio multipart MIME e genera come risultato un set di istanze di <see cref="T:System.Net.Http.HttpContent" />.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta le attività di recupero della raccolta di istanze di <see cref="T:System.Net.Http.HttpContent" />, dove ciascuna istanza rappresenta una parte del corpo.</returns>
      <param name="content">Istanza esistente di <see cref="T:System.Net.Http.HttpContent" /> da utilizzare per il contenuto dell'oggetto.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Legge tutte le parti del corpo di un messaggio multipart MIME e genera come risultato un set di istanze di <see cref="T:System.Net.Http.HttpContent" />.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta le attività di recupero della raccolta di istanze di <see cref="T:System.Net.Http.HttpContent" />, dove ciascuna istanza rappresenta una parte del corpo.</returns>
      <param name="content">Istanza esistente di <see cref="T:System.Net.Http.HttpContent" /> da utilizzare per il contenuto dell'oggetto.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)">
      <summary>Legge tutte le parti del corpo di un messaggio multipart MIME e genera come risultato un set di istanze di <see cref="T:System.Net.Http.HttpContent" /> utilizzando l'istanza streamProvider per determinare la posizione in cui viene scritto il contenuto di ciascuna parte del corpo.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta le attività di recupero della raccolta di istanze di <see cref="T:System.Net.Http.HttpContent" />, dove ciascuna istanza rappresenta una parte del corpo.</returns>
      <param name="content">Istanza esistente di <see cref="T:System.Net.Http.HttpContent" /> da utilizzare per il contenuto dell'oggetto.</param>
      <param name="streamProvider">Provider di flusso che fornisce flussi di output indicanti la posizione in cui scrivere le parti del corpo durante la relativa analisi.</param>
      <typeparam name="T">Tipo di multipart MIME.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)">
      <summary>Legge tutte le parti del corpo di un messaggio multipart MIME e genera come risultato un set di istanze di <see cref="T:System.Net.Http.HttpContent" /> utilizzando l'istanza streamProvider per determinare la posizione in cui viene scritto il contenuto di ciascuna parte del corpo e bufferSize come dimensione del buffer di lettura.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta le attività di recupero della raccolta di istanze di <see cref="T:System.Net.Http.HttpContent" />, dove ciascuna istanza rappresenta una parte del corpo.</returns>
      <param name="content">Istanza esistente di <see cref="T:System.Net.Http.HttpContent" /> da utilizzare per il contenuto dell'oggetto.</param>
      <param name="streamProvider">Provider di flusso che fornisce flussi di output indicanti la posizione in cui scrivere le parti del corpo durante la relativa analisi.</param>
      <param name="bufferSize">Dimensione del buffer utilizzato per la lettura del contenuto.</param>
      <typeparam name="T">Tipo di multipart MIME.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32,System.Threading.CancellationToken)">
      <summary>Legge tutte le parti del corpo di un messaggio multipart MIME e genera come risultato un set di istanze di <see cref="T:System.Net.Http.HttpContent" /> utilizzando l'istanza streamProvider per determinare la posizione in cui viene scritto il contenuto di ciascuna parte del corpo e bufferSize come dimensione del buffer di lettura.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta le attività di recupero della raccolta di istanze di <see cref="T:System.Net.Http.HttpContent" />, dove ciascuna istanza rappresenta una parte del corpo.</returns>
      <param name="content">Istanza esistente di <see cref="T:System.Net.Http.HttpContent" /> da utilizzare per il contenuto dell'oggetto.</param>
      <param name="streamProvider">Provider di flusso che fornisce flussi di output indicanti la posizione in cui scrivere le parti del corpo durante la relativa analisi.</param>
      <param name="bufferSize">Dimensione del buffer utilizzato per la lettura del contenuto.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
      <typeparam name="T">Tipo di multipart MIME.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Threading.CancellationToken)">
      <summary>Legge tutte le parti del corpo di un messaggio multipart MIME e genera come risultato un set di istanze di <see cref="T:System.Net.Http.HttpContent" /> utilizzando l'istanza streamProvider per determinare la posizione in cui viene scritto il contenuto di ciascuna parte del corpo.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta le attività di recupero della raccolta di istanze di <see cref="T:System.Net.Http.HttpContent" />, dove ciascuna istanza rappresenta una parte del corpo.</returns>
      <param name="content">Istanza esistente di <see cref="T:System.Net.Http.HttpContent" /> da utilizzare per il contenuto dell'oggetto.</param>
      <param name="streamProvider">Provider di flusso che fornisce flussi di output indicanti la posizione in cui scrivere le parti del corpo durante la relativa analisi.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
      <typeparam name="T">Tipo di multipart MIME.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpMessageContent">
      <summary> Classe <see cref="T:System.Net.Http.HttpContent" /> derivata che può incapsulare una proprietà <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> o <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> come entità con media type "application/http". </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.HttpMessageContent" /> che incapsula una proprietà <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" />. </summary>
      <param name="httpRequest">Istanza di <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> da incapsulare.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.HttpMessageContent" /> che incapsula una proprietà <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />. </summary>
      <param name="httpResponse">Istanza di <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> da incapsulare.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
      <summary> Rilascia le risorse non gestite e, facoltativamente, quelle gestite. </summary>
      <param name="disposing">true per rilasciare sia le risorse gestite sia quelle non gestite. false per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
      <summary> Ottiene il messaggio di richiesta HTTP. </summary>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
      <summary> Ottiene il messaggio di risposta HTTP. </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary> Serializza in modo asincrono il contenuto dell'oggetto nel flusso specificato. </summary>
      <returns>Istanza di <see cref="T:System.Threading.Tasks.Task" /> che serializza in modo asincrono il contenuto dell'oggetto.</returns>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> in cui scrivere il contenuto.</param>
      <param name="context">Istanza di <see cref="T:System.Net.TransportContext" /> associata.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
      <summary> Calcola la lunghezza del flusso, se possibile. </summary>
      <returns>true se la lunghezza è stata calcolata. In caso contrario, false.</returns>
      <param name="length">Lunghezza calcolata del flusso.</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestHeadersExtensions">
      <summary>Fornisce i metodi di estensione per la classe <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Ottiene tutte le intestazioni Cookie presenti nella richiesta.</summary>
      <returns>Raccolta di istanze di <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</returns>
      <param name="headers">Intestazioni della richiesta.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
      <summary>Ottiene tutte le intestazioni Cookie presenti nella richiesta che contengono uno stato di cookie il cui nome corrisponde al valore specificato.</summary>
      <returns>Raccolta di istanze di <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</returns>
      <param name="headers">Intestazioni della richiesta.</param>
      <param name="name">Nome dello stato di cookie per cui determinare la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)"></member>
    <member name="T:System.Net.Http.HttpResponseHeadersExtensions">
      <summary> Fornisce i metodi di estensione per la classe <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />. </summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})">
      <summary> Aggiunge cookie a una risposta. Ciascuna intestazione Set-Cookie è rappresentata come un'istanza di <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />. Un'istanza di <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> contiene informazioni sul dominio e sul percorso e altre informazioni sui cookie, nonché una o più istanze di <see cref="T:System.Net.Http.Headers.CookieState" />. Ciascuna istanza di <see cref="T:System.Net.Http.Headers.CookieState" /> include un nome di cookie e un qualsiasi stato associato a tale nome. Disponibile sotto forma di <see cref="T:System.Collections.Specialized.NameValueCollection" />, lo stato è codificato nell'URL di form HTML.  Questa rappresentazione consente di inserire più "cookie" correlati nella stessa intestazione Cookie, garantendo al tempo stesso la separazione tra uno stato di cookie e un altro. Di seguito è riportato un esempio di intestazione Cookie. In questo esempio sono presenti due istanze <see cref="T:System.Net.Http.Headers.CookieState" /> denominate rispettivamente state1 e state2. Inoltre, ciascuno stato di cookie contiene due coppie nome/valore: name1/value1 - name2/value2 e name3/value3 - name4/value4. &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
      <param name="headers">Intestazioni della risposta</param>
      <param name="cookies">Valori del cookie da aggiungere alla risposta.</param>
    </member>
    <member name="T:System.Net.Http.InvalidByteRangeException">
      <summary>Un'eccezione generata da <see cref="T:System.Net.Http.ByteRangeStreamContent" /> nel caso in cui nessuno degli intervalli richiesti si sovrappone all'estensione corrente della risorsa selezionata.L'estensione corrente della risorsa è indicata nella proprietà ContentRange.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.InvalidByteRangeException" />.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.InvalidByteRangeException" />.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.InvalidByteRangeException" />.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue,System.String,System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.InvalidByteRangeException" />.</summary>
    </member>
    <member name="P:System.Net.Http.InvalidByteRangeException.ContentRange">
      <summary> Estensione corrente della risorsa indicata in termini di un campo dell'intestazione ContentRange. </summary>
    </member>
    <member name="T:System.Net.Http.MultipartFileData">
      <summary>Rappresenta i dati di un file multipart.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartFileData" />.</summary>
      <param name="headers">Intestazioni dei dati del file multipart.</param>
      <param name="localFileName">Nome del file locale per i dati del file multipart.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.Headers">
      <summary>Ottiene o imposta le intestazioni dei dati del file multipart.</summary>
      <returns>Intestazioni dei dati del file multipart.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.LocalFileName">
      <summary>Ottiene o imposta il nome del file locale per i dati del file multipart.</summary>
      <returns>Nome del file locale per i dati del file multipart.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFileStreamProvider">
      <summary>Rappresenta un'interfaccia <see cref="T:System.Net.Http.IMultipartStreamProvider" /> adatta per la scrittura su file di ciascuna parte di corpo MIME del messaggio multipart MIME tramite un'istanza di <see cref="T:System.IO.FileStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartFileStreamProvider" />.</summary>
      <param name="rootPath">Percorso radice in cui viene scritto il contenuto delle parti di corpo multipart MIME.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartFileStreamProvider" />.</summary>
      <param name="rootPath">Percorso radice in cui viene scritto il contenuto delle parti di corpo multipart MIME.</param>
      <param name="bufferSize">Numero di byte memorizzati nel buffer per le operazioni di scrittura sul file.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.BufferSize">
      <summary>Ottiene o imposta il numero di byte memorizzati nel buffer per le operazioni di scrittura sul file.</summary>
      <returns>Numero di byte memorizzati nel buffer per le operazioni di scrittura sul file.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.FileData">
      <summary>Ottiene o imposta i dati del file multipart.</summary>
      <returns>Dati del file multipart.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ottiene il nome del file locale che verrà combinato con il percorso radice per la creazione di un nome di file assoluto in cui verrà archiviato il contenuto della parte di corpo MIME corrente.</summary>
      <returns>Nome di file relativo senza componente percorso.</returns>
      <param name="headers">Intestazioni per la parte di corpo MIME corrente.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ottiene l'istanza del flusso in cui viene scritta la parte di corpo del messaggio.</summary>
      <returns>Istanza di <see cref="T:System.IO.Stream" /> in cui viene scritta la parte di corpo del messaggio.</returns>
      <param name="parent">Contenuto dell'HTTP.</param>
      <param name="headers">Campi di intestazione che descrivono la parte di corpo.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.RootPath">
      <summary>Ottiene o imposta il percorso radice in cui viene scritto il contenuto delle parti di corpo multipart MIME.</summary>
      <returns>Percorso radice in cui viene scritto il contenuto delle parti di corpo multipart MIME.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataRemoteStreamProvider">
      <summary>Implementazione di <see cref="T:System.Net.Http.MultipartStreamProvider" /> adatta per l'uso con operazioni di caricamento di file HTML per la scrittura di contenuto di file in un <see cref="T:System.IO.Stream" /> di archiviazione remota.Il provider di flusso esamina il campo dell'intestazione Content-Disposition e determina un <see cref="T:System.IO.Stream" /> remoto di output in base alla presenza di un parametro filename.Se un parametro filename è presente nel campo di intestazione Content-Disposition, la parte di corpo sarà scritta in un <see cref="T:System.IO.Stream" /> remoto fornito da <see cref="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetRemoteStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />.In caso contrario, sarà scritta in <see cref="T:System.IO.MemoryStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartFormDataRemoteStreamProvider" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.ExecutePostProcessingAsync">
      <summary>Legge i contenuti non su file come dati del form.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione di post-elaborazione.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.ExecutePostProcessingAsync(System.Threading.CancellationToken)">
      <summary>Legge i contenuti non su file come dati del form.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione di post-elaborazione.</returns>
      <param name="cancellationToken">Token da monitorare per le richieste di annullamento.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataRemoteStreamProvider.FileData">
      <summary>Ottiene una raccolta di dati del file passata come parte dei dati del form multipart.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataRemoteStreamProvider.FormData">
      <summary>Ottiene un oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" /> di dati del form passato come parte dei dati del form multipart.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetRemoteStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Fornisce <see cref="T:System.Net.Http.RemoteStreamInfo" /> per <see cref="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />.Eseguire l'override di questo metodo per fornire un flusso remoto in cui scrivere i dati.</summary>
      <returns>Risultato che specifica un flusso remoto in cui il file sarà scritto e un percorso in cui sarà possibile accedere al file.Non può essere null e il flusso deve essere scrivibile.</returns>
      <param name="parent">Istanza multipart MIME <see cref="T:System.Net.Http.HttpContent" /> padre.</param>
      <param name="headers">Campi di intestazione che descrivono il contenuto della parte di corpo.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)"></member>
    <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
      <summary>Rappresenta un'interfaccia <see cref="T:System.Net.Http.IMultipartStreamProvider" /> adatta per la scrittura di contenuto di file in un'istanza di <see cref="T:System.IO.FileStream" /> nelle operazioni di caricamento di file HTML.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" />. </summary>
      <param name="rootPath">Percorso radice in cui viene scritto il contenuto delle parti di corpo multipart MIME.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" />.</summary>
      <param name="rootPath">Percorso radice in cui viene scritto il contenuto delle parti di corpo multipart MIME.</param>
      <param name="bufferSize">Numero di byte memorizzati nel buffer per le operazioni di scrittura sul file.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync">
      <summary>Legge i contenuti non su file come dati del form.</summary>
      <returns>Attività che rappresenta l'operazione asincrona.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Net.Http.MultipartFormDataStreamProvider.FormData">
      <summary>Ottiene un oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" /> di dati del form passato come parte dei dati del form multipart.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> di dati del form.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ottiene l'istanza del flusso in cui viene scritta la parte di corpo del messaggio.</summary>
      <returns>Istanza di <see cref="T:System.IO.Stream" /> in cui viene scritta la parte di corpo del messaggio.</returns>
      <param name="parent">Contenuto HTTP che contiene questa parte di corpo.</param>
      <param name="headers">Campi di intestazione che descrivono la parte di corpo.</param>
    </member>
    <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
      <summary>Rappresenta un provider di flusso di memoria multipart.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Restituisce <see cref="T:System.IO.Stream" /> per <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</summary>
      <returns>Classe <see cref="T:System.IO.Stream" /> per <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</returns>
      <param name="parent">Oggetto <see cref="T:System.Net.Http.HttpContent" />.</param>
      <param name="headers">Intestazioni di contenuto HTTP.</param>
    </member>
    <member name="T:System.Net.Http.MultipartRelatedStreamProvider">
      <summary>Rappresenta il provider per il flusso Multistream multipart correlato.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ottiene il flusso correlato per il provider.</summary>
      <returns>Intestazioni di contenuto.</returns>
      <param name="parent">Contenuto padre.</param>
      <param name="headers">Intestazioni di contenuto HTTP.</param>
    </member>
    <member name="P:System.Net.Http.MultipartRelatedStreamProvider.RootContent">
      <summary>Ottiene il contenuto radice di <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</summary>
      <returns>Contenuto radice di <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartRemoteFileData">
      <summary>Rappresenta i dati di un file multipart per l'archiviazione remota.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRemoteFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartRemoteFileData" />.</summary>
      <param name="headers">Intestazioni dei dati del file multipart.</param>
      <param name="location">Percorso del file remoto.</param>
      <param name="fileName">Nome del file remoto.</param>
    </member>
    <member name="P:System.Net.Http.MultipartRemoteFileData.FileName">
      <summary>Ottiene il nome del file remoto.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartRemoteFileData.Headers">
      <summary>Ottiene le intestazioni dei dati del file multipart.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartRemoteFileData.Location">
      <summary>Ottiene il percorso del file remoto.</summary>
    </member>
    <member name="T:System.Net.Http.MultipartStreamProvider">
      <summary>Rappresenta un provider di flusso che esamina le intestazioni fornite dal parser multipart MIME come parte dei metodi di estensione multipart MIME (vedere <see cref="T:System.Net.Http.HttpContentMultipartExtensions" />) e determina il tipo di flusso da restituire per la scrittura della parte di corpo.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartStreamProvider.Contents">
      <summary>Ottiene o imposta i contenuti per <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>Contenuti per <see cref="T:System.Net.Http.MultipartStreamProvider" />.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync">
      <summary>Esegue l'operazione di post-elaborazione per <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>Attività asincrona per l'operazione.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync(System.Threading.CancellationToken)">
      <summary>Esegue l'operazione di post-elaborazione per <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>Attività asincrona per l'operazione.</returns>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ottiene il flusso in cui scrivere la parte di corpo.Questo metodo viene chiamato quando una parte di corpo multipart MIME è stata analizzata.</summary>
      <returns>Istanza di <see cref="T:System.IO.Stream" /> in cui viene scritta la parte di corpo del messaggio.</returns>
      <param name="parent">Contenuto dell'HTTP.</param>
      <param name="headers">Campi di intestazione che descrivono la parte di corpo.</param>
    </member>
    <member name="T:System.Net.Http.ObjectContent">
      <summary> Contiene un valore nonché un oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> associato che verrà utilizzato per serializzare tale valore durante la scrittura del contenuto. </summary>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.ObjectContent" />.</summary>
      <param name="type">Tipo di oggetto che verrà contenuto da questa istanza.</param>
      <param name="value">Valore dell'oggetto che verrà contenuto da questa istanza.</param>
      <param name="formatter">Formattatore da utilizzare per la serializzazione del valore.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <param name="type">Tipo di oggetto che verrà contenuto da questa istanza.</param>
      <param name="value">Valore dell'oggetto che verrà contenuto da questa istanza.</param>
      <param name="formatter">Formattatore da utilizzare per la serializzazione del valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type.Il valore può essere null. In tal caso, verrà utilizzato il tipo di contenuto predefinito del formattatore.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.ObjectContent" />.</summary>
      <param name="type">Tipo di oggetto che verrà contenuto da questa istanza.</param>
      <param name="value">Valore dell'oggetto che verrà contenuto da questa istanza.</param>
      <param name="formatter">Formattatore da utilizzare per la serializzazione del valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Formatter">
      <summary>Ottiene il formattatore di media type associato a questa istanza di contenuto.</summary>
      <returns>Formattatore di media type associato a questa istanza di contenuto.</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.ObjectType">
      <summary>Ottiene il tipo di oggetto gestito dall'istanza corrente di <see cref="T:System.Net.Http.ObjectContent" />.</summary>
      <returns>Tipo di oggetto.</returns>
    </member>
    <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serializza in modo asincrono il contenuto dell'oggetto nel flusso specificato.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="stream">Flusso in cui scrivere il contenuto.</param>
      <param name="context">Istanza di <see cref="T:System.Net.TransportContext" /> associata.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
      <summary>Calcola la lunghezza del flusso, se possibile.</summary>
      <returns>true se la lunghezza è stata calcolata. In caso contrario, false.</returns>
      <param name="length">Riceve la lunghezza calcolata del flusso.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Value">
      <summary>Ottiene o imposta il valore del contenuto.</summary>
      <returns>Valore del contenuto.</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent`1">
      <summary> Formato generico di <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <typeparam name="T">Tipo di oggetto che verrà contenuto da questa classe.</typeparam>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.ObjectContent`1" />.</summary>
      <param name="value">Valore dell'oggetto che verrà contenuto da questa istanza.</param>
      <param name="formatter">Formattatore da utilizzare per la serializzazione del valore.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inizializza una nuova istanza della classe &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt;. </summary>
      <param name="value">Valore dell'oggetto che verrà contenuto da questa istanza.</param>
      <param name="formatter">Formattatore da utilizzare per la serializzazione del valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type.Il valore può essere null. In tal caso, verrà utilizzato il tipo di contenuto predefinito del formattatore.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.ObjectContent`1" />.</summary>
      <param name="value">Valore dell'oggetto che verrà contenuto da questa istanza.</param>
      <param name="formatter">Formattatore da utilizzare per la serializzazione del valore.</param>
      <param name="mediaType">Valore autorevole dell'intestazione Content-Type.</param>
    </member>
    <member name="T:System.Net.Http.PushStreamContent">
      <summary>Consente di attivare scenari che prevedono la scrittura diretta tramite un flusso sia sincrona che asincrona da parte di un produttore di dati.</summary>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Azione chiamata quando è disponibile un flusso di output, in modo da consentire a tale azione di scrivere direttamente sul flusso. </param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Azione chiamata quando è disponibile un flusso di output, in modo da consentire a tale azione di scrivere direttamente sul flusso.</param>
      <param name="mediaType">Media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Azione chiamata quando è disponibile un flusso di output, in modo da consentire a tale azione di scrivere direttamente sul flusso.</param>
      <param name="mediaType">Media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Azione chiamata quando è disponibile un flusso di output, in modo da consentire a tale azione di scrivere direttamente sul flusso.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Azione chiamata quando è disponibile un flusso di output, in modo da consentire a tale azione di scrivere direttamente sul flusso.</param>
      <param name="mediaType">Media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.PushStreamContent" />.</summary>
      <param name="onStreamAvailable">Azione chiamata quando è disponibile un flusso di output, in modo da consentire a tale azione di scrivere direttamente sul flusso.</param>
      <param name="mediaType">Media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serializza il contenuto push in un flusso in modo asincrono.</summary>
      <returns>Contenuto push serializzato.</returns>
      <param name="stream">Flusso in cui verrà serializzato il contenuto push.</param>
      <param name="context">Contesto.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
      <summary>Determina se la lunghezza in byte del contenuto del flusso è valida.</summary>
      <returns>true se la lunghezza è valida. In caso contrario, false.</returns>
      <param name="length">Lunghezza in byte del contenuto del flusso.</param>
    </member>
    <member name="T:System.Net.Http.RemoteStreamInfo">
      <summary>Rappresenta il risultato per <see cref="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetRemoteStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />.</summary>
    </member>
    <member name="M:System.Net.Http.RemoteStreamInfo.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.RemoteStreamInfo" />.</summary>
      <param name="remoteStream">Istanza di flusso remoto in cui sarà scritto il file.</param>
      <param name="location">Percorso del file remoto.</param>
      <param name="fileName">Nome del file remoto.</param>
    </member>
    <member name="P:System.Net.Http.RemoteStreamInfo.FileName">
      <summary>Ottiene il percorso del file remoto.</summary>
    </member>
    <member name="P:System.Net.Http.RemoteStreamInfo.Location">
      <summary>Ottiene il percorso del file remoto.</summary>
    </member>
    <member name="P:System.Net.Http.RemoteStreamInfo.RemoteStream">
      <summary>Ottiene l'istanza di flusso remoto in cui sarà scritto il file.</summary>
    </member>
    <member name="T:System.Net.Http.UnsupportedMediaTypeException">
      <summary> Definisce un tipo di eccezione per segnalare che media type della richiesta non è supportato. </summary>
    </member>
    <member name="M:System.Net.Http.UnsupportedMediaTypeException.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.UnsupportedMediaTypeException" />. </summary>
      <param name="message">Messaggio che descrive l'errore.</param>
      <param name="mediaType">Media type non supportato.</param>
    </member>
    <member name="P:System.Net.Http.UnsupportedMediaTypeException.MediaType">
      <summary>Ottiene o imposta il media type.</summary>
      <returns>Media type.</returns>
    </member>
    <member name="T:System.Net.Http.UriExtensions">
      <summary>Contiene metodi di estensione per consentire la lettura di oggetti fortemente tipizzati dal componente di query delle istanze di <see cref="T:System.Uri" />. </summary>
    </member>
    <member name="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)">
      <summary>Analizza la porzione di query dell'URI specificato.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> contenente i parametri di query.</returns>
      <param name="address">URI da analizzare.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
      <summary>Legge i dati codificati nell'URL di form HTML forniti nella stringa di query dell'URI come oggetto di un tipo specificato.</summary>
      <returns>true se il componente di query dell'URI può essere letto come il tipo specificato. In caso contrario, false.</returns>
      <param name="address">URI da leggere.</param>
      <param name="type">Tipo di oggetto da leggere.</param>
      <param name="value">Quando termina, questo metodo restituisce un oggetto inizializzato dal componente di query dell'URI. Questo parametro viene considerato non inizializzato.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)">
      <summary>Legge i dati codificati nell'URL di form HTML forniti nella stringa di query dell'URI come oggetto di un tipo specificato.</summary>
      <returns>true se il componente di query dell'URI può essere letto come il tipo specificato. In caso contrario, false.</returns>
      <param name="address">URI da leggere.</param>
      <param name="value">Quando termina, questo metodo restituisce un oggetto inizializzato dal componente di query dell'URI. Questo parametro viene considerato non inizializzato.</param>
      <typeparam name="T">Tipo di oggetto da leggere.</typeparam>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)">
      <summary>Legge i dati codificati nell'URL di form HTML forniti nel componente di query dell'istanza di <see cref="T:System.Uri" /> come oggetto <see cref="T:Newtonsoft.Json.Linq.JObject" />.</summary>
      <returns>true se il componente di query può essere letto come <see cref="T:Newtonsoft.Json.Linq.JObject" />. In caso contrario, false.</returns>
      <param name="address">Istanza di <see cref="T:System.Uri" /> da cui eseguire la lettura.</param>
      <param name="value">Oggetto da inizializzare con l'istanza oppure null se non è possibile eseguire la conversione.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter">
      <summary>Classe astratta del formattatore di media type per supportare Bson e Json.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.#ctor(System.Net.Http.Formatting.BaseJsonMediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" />.</summary>
      <param name="formatter">Istanza <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" /> da cui copiare le impostazioni.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Determina se questo formattatore può leggere gli oggetti del tipo specificato.</summary>
      <returns>true se gli oggetti di questo tipo possono essere letti. In caso contrario, false.</returns>
      <param name="type">Tipo di oggetto che verrà letto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Determina se questo formattatore può scrivere gli oggetti del tipo specificato.</summary>
      <returns>true se gli oggetti di questo possono essere scritti. In caso contrario, false.</returns>
      <param name="type">Tipo di oggetto da scrivere.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateDefaultSerializerSettings">
      <summary>Crea un'istanza di <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> con le impostazioni predefinite utilizzate da <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" />.</summary>
      <returns>Restituisce <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la deserializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonReader" />.</summary>
      <returns>Lettore da utilizzare durante la deserializzazione.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la lettura.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateJsonSerializer">
      <summary>Chiamato durante la serializzazione e la deserializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonSerializer" />.</summary>
      <returns>JsonSerializer utilizzato durante la serializzazione e la deserializzazione.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la serializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonWriter" />.</summary>
      <returns>Writer da utilizzare durante la serializzazione.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la scrittura.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita dal formattatore.</summary>
      <returns>Profondità massima consentita dal formattatore.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Chiamato durante la deserializzazione per leggere un oggetto del tipo specificato dal flusso specificato.</summary>
      <returns>Oggetto letto.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la lettura.</param>
      <param name="formatterLogger">Logger per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Chiamato durante la deserializzazione per leggere un oggetto del tipo specificato dal flusso specificato.</summary>
      <returns>Attività il cui risultato sarà costituito dall'istanza di oggetto letta.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto letto.</param>
      <param name="formatterLogger">Logger per la registrazione degli eventi.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.SerializerSettings">
      <summary>Ottiene o imposta la classe JsonSerializerSettings utilizzata per configurare l'oggetto JsonSerializer.</summary>
      <returns>Classe JsonSerializerSettings utilizzata per configurare l'oggetto JsonSerializer.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la serializzazione per scrivere un oggetto del tipo specificato nel flusso specificato.</summary>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la scrittura.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Chiamato durante la serializzazione per scrivere un oggetto del tipo specificato nel flusso specificato.</summary>
      <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto scritto.</param>
      <param name="transportContext">Contesto di trasporto.</param>
      <param name="cancellationToken">Token da monitorare per l'annullamento.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BsonMediaTypeFormatter">
      <summary>Rappresenta un formattatore di media type per la gestione di Bson.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.BsonMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.#ctor(System.Net.Http.Formatting.BsonMediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.BsonMediaTypeFormatter" />.</summary>
      <param name="formatter">Formattatore da cui copiare le impostazioni.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la deserializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonReader" />.</summary>
      <returns>Lettore da utilizzare durante la deserializzazione.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la lettura.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la serializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonWriter" />.</summary>
      <returns>Writer da utilizzare durante la serializzazione.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la scrittura.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BsonMediaTypeFormatter.DefaultMediaType">
      <summary>Ottiene il media type predefinito per Json, ovvero "application/bson".</summary>
      <returns>Media type predefinito per Json, ovvero "application/bson".</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.BsonMediaTypeFormatter.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita dal formattatore.</summary>
      <returns>Profondità massima consentita dal formattatore.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Chiamato durante la deserializzazione per leggere un oggetto del tipo specificato dal flusso specificato.</summary>
      <returns>Oggetto letto.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la lettura.</param>
      <param name="formatterLogger">Logger per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Chiamato durante la deserializzazione per leggere un oggetto del tipo specificato dal flusso specificato.</summary>
      <returns>Attività il cui risultato sarà costituito dall'istanza di oggetto letta.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto letto.</param>
      <param name="formatterLogger">Logger per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la serializzazione per scrivere un oggetto del tipo specificato nel flusso specificato.</summary>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la scrittura.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter">
      <summary>Rappresenta una classe helper che consente l'utilizzo di un formattatore sincrono in aggiunta all'infrastruttura del formattatore asincrono.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor(System.Net.Http.Formatting.BufferedMediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" />.</summary>
      <param name="formatter">Istanza <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" /> da cui copiare le impostazioni.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BufferedMediaTypeFormatter.BufferSize">
      <summary>Ottiene o imposta la dimensione del buffer consigliata per l'utilizzo con i flussi, in byte.</summary>
      <returns>Dimensione del buffer consigliata per l'utilizzo con i flussi, in byte.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Legge in modalità sincrona dal flusso memorizzato nel buffer.</summary>
      <returns>Oggetto del <paramref name="type" /> specificato.</returns>
      <param name="type">Tipo dell'oggetto da deserializzare.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Legge in modalità sincrona dal flusso memorizzato nel buffer.</summary>
      <returns>Oggetto del <paramref name="type" /> specificato.</returns>
      <param name="type">Tipo dell'oggetto da deserializzare.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Legge in modalità asincrona dal flusso memorizzato nel buffer.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="type">Tipo dell'oggetto da deserializzare.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Legge in modalità asincrona dal flusso memorizzato nel buffer.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="type">Tipo dell'oggetto da deserializzare.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Scrive in modalità sincrona nel flusso memorizzato nel buffer.</summary>
      <param name="type">Tipo dell'oggetto da serializzare.</param>
      <param name="value">Valore dell'oggetto da scrivere.Può essere null.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Scrive in modalità sincrona nel flusso memorizzato nel buffer.</summary>
      <param name="type">Tipo dell'oggetto da serializzare.</param>
      <param name="value">Valore dell'oggetto da scrivere.Può essere null.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Scrive in modalità asincrona nel flusso memorizzato nel buffer.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="type">Tipo dell'oggetto da serializzare.</param>
      <param name="value">Valore dell'oggetto da scrivere.Può essere null.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="transportContext">Contesto di trasporto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Scrive in modalità asincrona nel flusso memorizzato nel buffer.</summary>
      <returns>Oggetto attività che rappresenta l'operazione asincrona.</returns>
      <param name="type">Tipo dell'oggetto da serializzare.</param>
      <param name="value">Valore dell'oggetto da scrivere.Può essere null.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="transportContext">Contesto di trasporto.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.ContentNegotiationResult">
      <summary> Rappresenta il risultato della negoziazione del contenuto eseguita tramite &lt;see cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.ContentNegotiationResult.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Creare l'oggetto del risultato della negoziazione di contenuto. </summary>
      <param name="formatter">Formattatore.</param>
      <param name="mediaType">Media type preferito.Può essere null.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.Formatter">
      <summary> Formattatore selezionato per la serializzazione. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.MediaType">
      <summary>Media type associato al formattatore selezionato per la serializzazione.Può essere null.</summary>
    </member>
    <member name="T:System.Net.Http.Formatting.DefaultContentNegotiator">
      <summary> Implementazione predefinita di <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />, usata per selezionare un'istanza di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> per <see cref="T:System.Net.Http.HttpRequestMessage" /> o <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" />.</summary>
      <param name="excludeMatchOnTypeOnly">true per escludere i formattatori che stabiliscono una corrispondenza solo per il tipo di oggetto. In caso contrario, false.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Determina l'accuratezza della corrispondenza di ciascun formattatore con una richiesta HTTP.</summary>
      <returns>Restituisce una raccolta di oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> che rappresentano tutte le corrispondenze.</returns>
      <param name="type">Tipo da serializzare.</param>
      <param name="request">Richiesta.</param>
      <param name="formatters">Set di oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> disponibili per la selezione.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly">
      <summary>Se il valore è true, escludere i formattatori che determinano una corrispondenza solo per il tipo di oggetto. In caso contrario, false.</summary>
      <returns>Restituisce un oggetto <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Stabilisce la corrispondenza di un set di campi di intestazione Accept in base ai media type supportati da un formattatore.</summary>
      <returns>Restituisce un oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> che indica il grado di qualità della corrispondenza oppure null se non è presente alcuna corrispondenza.</returns>
      <param name="sortedAcceptValues">Elenco di valori di intestazione Accept disposti in ordine decrescente in base al fattore q. È possibile creare tale elenco chiamando il metodo <see cref="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})" />.</param>
      <param name="formatter">Formattatore in base al quale stabilire la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Stabilisce la corrispondenza di una richiesta in base agli oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> di un formattatore di media type.</summary>
      <returns>Restituisce un oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> che indica il grado di qualità della corrispondenza oppure null se non è presente alcuna corrispondenza.</returns>
      <param name="request">Richiesta per cui stabilire una corrispondenza.</param>
      <param name="formatter">Formattatore di media type.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Stabilire la corrispondenza del tipo di contenuto di una richiesta in base ai media type supportati da un formattatore.</summary>
      <returns>Restituisce un oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> che indica il grado di qualità della corrispondenza oppure null se non è presente alcuna corrispondenza.</returns>
      <param name="request">Richiesta per cui stabilire una corrispondenza.</param>
      <param name="formatter">Formattatore in base al quale stabilire la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Seleziona il primo media type supportato di un formattatore.</summary>
      <returns>Restituisce un oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> con <see cref="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking" /> impostato su MatchOnCanWriteType oppure null se non è presente alcuna corrispondenza. <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> che indica la qualità della corrispondenza oppure null se non è presente alcuna corrispondenza.</returns>
      <param name="type">Tipo per cui stabilire la corrispondenza.</param>
      <param name="formatter">Formattatore in base al quale stabilire la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Esegue la negoziazione del contenuto selezionando l'istanza di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> più appropriata tra i <paramref name="formatters" /> passati per la <paramref name="request" /> specificata che sono in grado di serializzare un oggetto del <paramref name="type" /> specificato.</summary>
      <returns>Risultato della negoziazione contenente l'istanza di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> più appropriata oppure null se non è disponibile alcun formattatore appropriato.</returns>
      <param name="type">Tipo da serializzare.</param>
      <param name="request">Richiesta.</param>
      <param name="formatters">Set di oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> disponibili per la selezione.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Determina la codifica dei caratteri più appropriata per la scrittura della risposta.</summary>
      <returns>Restituisce <see cref="T:System.Text.Encoding" />, che rappresenta la migliore corrispondenza.</returns>
      <param name="request">Richiesta.</param>
      <param name="formatter">Formattatore di media type selezionato.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})">
      <summary>Selezionare la migliore tra le corrispondenze candidate trovate.</summary>
      <returns>Restituisce l'oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />, che rappresenta la migliore corrispondenza. </returns>
      <param name="matches">Raccolta di corrispondenze.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ShouldMatchOnType(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary> Determinare se stabilire o meno la corrispondenza per un tipo. Ciò viene usato per determinare se generare una risposta con codice 406 o usare il formattatore di media type predefinito in caso non venga stabilita alcuna corrispondenza nella richiesta. Se ExcludeMatchOnTypeOnly è true la corrispondenza per un tipo non viene stabilita finché non sono disponibili intestazioni Accept. </summary>
      <returns>True si verifica se non sono presenti ExcludeMatchOnTypeOnly e intestazioni Accept con un fattore Q maggiore di 0,0.</returns>
      <param name="sortedAcceptValues">Valori dell'intestazione Accept ordinati per cui determinare la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary>Dispone i valori di intestazione Accept in ordine decrescente in base al fattore q.</summary>
      <returns>Restituisce l'elenco ordinato di oggetti MediaTypeWithQualityHeaderValue.</returns>
      <param name="headerValues">Raccolta di oggetti StringWithQualityHeaderValue che rappresentano i campi di intestazione.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})">
      <summary>Dispone un elenco di valori di intestazione Accept-Charset, Accept-Encoding, Accept-Language o valori correlati in ordine decrescente in base al fattore q.</summary>
      <returns>Restituisce l'elenco ordinato di oggetti StringWithQualityHeaderValue.</returns>
      <param name="headerValues">Raccolta di oggetti StringWithQualityHeaderValue che rappresentano i campi di intestazione.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)">
      <summary>Valuta se una corrispondenza è migliore di quella corrente.</summary>
      <returns>Restituisce qualsiasi oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> che rappresenta una corrispondenza migliore.</returns>
      <param name="current">Corrispondenza corrente.</param>
      <param name="potentialReplacement">Corrispondenza da valutare in base alla corrispondenza corrente.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
      <summary> Classe helper per la serializzazione di tipi &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; mediante la delega tramite un'implementazione concreta."/&amp;gt;. </summary>
      <typeparam name="T">Implementazione dell'interfaccia da delegare.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
      <summary>Inizializzare un oggetto DelegatingEnumerable.Questo costruttore è necessario per il funzionamento di <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inizializzare un oggetto DelegatingEnumerable con un'interfaccia &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;.Questa è una classe helper per la delega di interfacce &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; per <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="source">Istanza di &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; da cui ottenere l'enumeratore.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
      <summary>Questo metodo non è implementato ma è obbligatorio per la serializzazione.Non utilizzarlo.</summary>
      <param name="item">Elemento da aggiungere.Non utilizzato.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
      <summary> Ottenere l'enumeratore dell'interfaccia &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; associata. </summary>
      <returns>Enumeratore dell'origine di &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary> Ottenere l'enumeratore dell'interfaccia &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; associata. </summary>
      <returns>Enumeratore dell'origine di &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormDataCollection">
      <summary>Rappresentare la raccolta di dati del form.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.FormDataCollection" />.</summary>
      <param name="pairs">Coppie.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.FormDataCollection" />.</summary>
      <param name="query">Query.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Uri)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.FormDataCollection" />.</summary>
      <param name="uri">URI</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.Get(System.String)">
      <summary>Ottiene la raccolta di dati del form.</summary>
      <returns>Raccolta di dati del form.</returns>
      <param name="key">Chiave.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetEnumerator">
      <summary>Ottiene un enumerabile che scorre la raccolta.</summary>
      <returns>Enumerabile che scorre la raccolta.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetValues(System.String)">
      <summary>Ottiene i valori della raccolta dei dati del form.</summary>
      <returns>Valori della raccolta dei dati del form.</returns>
      <param name="key">Chiave.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormDataCollection.Item(System.String)">
      <summary>Ottiene valori associati a una chiave specificata.In caso di più valori, questi vengono concatenati.</summary>
      <returns>Valori associati a una chiave specificata.In caso di più valori, questi vengono concatenati.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.ReadAsNameValueCollection">
      <summary>Legge la raccolta dei dati del form come una raccolta di valore del nome.</summary>
      <returns>Raccolta dei dati del form come una raccolta di valore del nome.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Ottiene un enumerabile che scorre la raccolta.</summary>
      <returns>Enumerabile che scorre la raccolta.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
      <summary>Classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> per la gestione di dati codificati negli URL di form HTML, definiti application/x-www-form-urlencoded.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor(System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" />.</summary>
      <param name="formatter">Istanza <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> da cui copiare le impostazioni.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Esegue una query per determinare se <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> è in grado di deserializzare un oggetto del tipo specificato.</summary>
      <returns>true se <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> è in grado di deserializzare il tipo. In caso contrario, false.</returns>
      <param name="type">Tipo da deserializzare.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Esegue una query per determinare se <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> è in grado di serializzare un oggetto del tipo specificato.</summary>
      <returns>true se <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> è in grado di serializzare il tipo. In caso contrario, false.</returns>
      <param name="type">Tipo da serializzare.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
      <summary>Ottiene il media type predefinito per i dati codificati negli URL di form HTML, ovvero application/x-www-form-urlencoded.</summary>
      <returns>Media type predefinito per i dati codificati negli URL di form HTML.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita dal formattatore.</summary>
      <returns>Profondità massima.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
      <summary>Ottiene o imposta la dimensione del buffer durante la lettura del flusso in ingresso.</summary>
      <returns>Dimensione del buffer.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Deserializza in modo asincrono un oggetto del tipo specificato.</summary>
      <returns>Istanza di <see cref="T:System.Threading.Tasks.Task" /> il cui risultato sarà costituito dall'istanza di oggetto letta.</returns>
      <param name="type">Tipo di oggetto da deserializzare.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> da leggere.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto letto.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IContentNegotiator">
      <summary>Esegue la negoziazione del contenuto.Tale processo prevede la selezione di un writer di risposta (formattatore) in conformità con i valori di intestazione della richiesta.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Esegue la negoziazione del contenuto selezionando l'istanza di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> più appropriata tra i formattatori passati per la richiesta specificata che sono in grado di serializzare un oggetto del tipo specificato. </summary>
      <returns>Risultato della negoziazione contenente l'istanza di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> più appropriata oppure null se non è disponibile alcun formattatore appropriato.</returns>
      <param name="type">Tipo da serializzare.</param>
      <param name="request">Messaggio di richiesta contenente i valori di intestazione utilizzati per eseguire la negoziazione.</param>
      <param name="formatters">Set di oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> disponibili per la selezione.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IFormatterLogger">
      <summary>Specifica un'interfaccia callback che può essere utilizzata da un formattatore per la registrazione di errori durante la lettura.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Registra un errore.</summary>
      <param name="errorPath">Percorso del membro per il quale viene registrato l'errore.</param>
      <param name="exception">Messaggio di errore.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.String)">
      <summary>Registra un errore.</summary>
      <param name="errorPath">Percorso del membro per il quale viene registrato l'errore.</param>
      <param name="errorMessage">Messaggio di errore da registrare.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IRequiredMemberSelector">
      <summary>Definisce il metodo che determina se un membro deve essere considerato obbligatorio per la deserializzazione.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Determina se un membro deve essere considerato obbligatorio per la deserializzazione.</summary>
      <returns>true se <paramref name="member" /> deve essere considerato obbligatorio. In caso contrario, false.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> da deserializzare</param>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonContractResolver">
      <summary>Rappresenta l'oggetto <see cref="T:Newtonsoft.Json.Serialization.IContractResolver" /> predefinito utilizzato da <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />.Utilizza l'oggetto <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> del formattatore per selezionare i membri richiesti e riconosce il tipo di annotazione <see cref="T:System.SerializableAttribute" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonContractResolver.#ctor(System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.JsonContractResolver" />.</summary>
      <param name="formatter">Il formattatore da utilizzare per la risoluzione dei membri richiesti.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>Crea una proprietà sulla classe specificata mediante l'utilizzo dei parametri specificati.</summary>
      <returns>
        <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> da creare sulla classe specificata mediante l'utilizzo dei parametri specificati.</returns>
      <param name="member">Informazioni sul membro.</param>
      <param name="memberSerialization">Serializzazione del membro.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
      <summary>Rappresenta la classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> per la gestione di JSON. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor(System.Net.Http.Formatting.JsonMediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />.</summary>
      <param name="formatter">Istanza <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> da cui copiare le impostazioni.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Determina se questa istanza di <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> può leggere oggetti con il parametro <paramref name="type" /> specificato.</summary>
      <returns>true se gli oggetti con il parametro <paramref name="type" /> specificato possono essere letti. In caso contrario, false.</returns>
      <param name="type">Tipo di oggetto che verrà letto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Determina se questa istanza di <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> può scrivere oggetti con il parametro <paramref name="type" /> specificato.</summary>
      <returns>true se gli oggetti con il parametro <paramref name="type" /> specificato possono essere scritti. In caso contrario, false.</returns>
      <param name="type">Tipo di oggetto che verrà scritto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateDataContractSerializer(System.Type)">
      <summary>Chiamato durante la deserializzazione per ottenere <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
      <returns>Oggetto utilizzato per la serializzazione.</returns>
      <param name="type">Tipo di oggetto che verrà serializzato o deserializzato.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la deserializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonReader" />.</summary>
      <returns>Lettore da utilizzare durante la deserializzazione.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la lettura.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la serializzazione per ottenere <see cref="T:Newtonsoft.Json.JsonWriter" />.</summary>
      <returns>Writer da utilizzare durante la serializzazione.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la scrittura.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
      <summary>Ottiene il media type predefinito per JSON, ovvero "application/json".</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> per JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.Indent">
      <summary> Ottiene o imposta un valore che indica se impostare un rientro per gli elementi durante la scrittura di dati.  </summary>
      <returns>true se si desidera impostare un rientro per gli elementi durante la scrittura di dati. In caso contrario, false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita dal formattatore.</summary>
      <returns>Profondità massima consentita dal formattatore.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Chiamato durante la deserializzazione per leggere un oggetto del tipo specificato dal flusso specificato.</summary>
      <returns>Oggetto letto.</returns>
      <param name="type">Tipo dell'oggetto da leggere.</param>
      <param name="readStream">Flusso da cui eseguire la lettura.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la lettura.</param>
      <param name="formatterLogger">Logger per la registrazione degli eventi.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.UseDataContractJsonSerializer">
      <summary> Ottiene o imposta un valore che indica se utilizzare <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> per impostazione predefinita. </summary>
      <returns>true se si desidera utilizzare <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> per impostazione predefinita. In caso contrario, false.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Chiamato durante la serializzazione per scrivere un oggetto del tipo specificato nel flusso specificato.</summary>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="effectiveEncoding">Codifica da utilizzare durante la scrittura.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Chiamato durante la serializzazione per scrivere un oggetto del tipo specificato nel flusso specificato.</summary>
      <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Oggetto da scrivere.</param>
      <param name="writeStream">Flusso in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto scritto.</param>
      <param name="transportContext">Contesto di trasporto.</param>
      <param name="cancellationToken">Token da monitorare per l'annullamento.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
      <summary> Classe di base per la gestione della serializzazione e della deserializzazione di oggetti fortemente tipizzati mediante <see cref="T:System.Net.Http.ObjectContent" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor(System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <param name="formatter">Istanza <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> da cui copiare le impostazioni.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
      <summary>Esegue una query per determinare se <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> è in grado di deserializzare un oggetto del tipo specificato.</summary>
      <returns>true se <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> è in grado di deserializzare il tipo. In caso contrario, false.</returns>
      <param name="type">Tipo da deserializzare.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Esegue una query per determinare se <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> è in grado di serializzare un oggetto del tipo specificato.</summary>
      <returns>true se <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> è in grado di serializzare il tipo. In caso contrario, false.</returns>
      <param name="type">Tipo da serializzare.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
      <summary>Ottiene il valore predefinito per il tipo specificato.</summary>
      <returns>Valore predefinito.</returns>
      <param name="type">Tipo per il quale ottenere il valore predefinito.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Restituisce un'istanza specializzata di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> in grado formattare una risposta per i parametri specificati.</summary>
      <returns>Restituisce <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
      <param name="type">Tipo da formattare.</param>
      <param name="request">Richiesta.</param>
      <param name="mediaType">Media type.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys">
      <summary>Ottiene o imposta il numero massimo di chiavi memorizzate in una T: <see cref="System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>Numero massimo di chiavi.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
      <summary>Ottiene la raccolta modificabile di oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> che corrispondono alle richieste HTTP ai media type.</summary>
      <returns>Raccolta <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Deserializza in modo asincrono un oggetto del tipo specificato.</summary>
      <returns>Istanza di <see cref="T:System.Threading.Tasks.Task" /> il cui risultato sarà costituito da un oggetto del tipo specificato.</returns>
      <param name="type">Tipo dell'oggetto da deserializzare.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> da leggere.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
      <exception cref="T:System.NotSupportedException">I tipi derivati devono supportare la lettura.</exception>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Deserializza in modo asincrono un oggetto del tipo specificato.</summary>
      <returns>Istanza di <see cref="T:System.Threading.Tasks.Task" /> il cui risultato sarà costituito da un oggetto del tipo specificato.</returns>
      <param name="type">Tipo dell'oggetto da deserializzare.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> da leggere.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector">
      <summary>Ottiene o imposta l'istanza di <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> utilizzata per determinare i membri obbligatori.</summary>
      <returns>Istanza di <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Dato un set di intestazioni di contenuto, determina la codifica dei caratteri più appropriata alla lettura o alla scrittura di un corpo entità HTTP.</summary>
      <returns>Codifica che rappresenta la migliore corrispondenza.</returns>
      <param name="contentHeaders">Intestazioni di contenuto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Imposta le intestazioni predefinite per il contenuto che verrà formattato mediante questo formattatore.Questo metodo viene chiamato dal costruttore <see cref="T:System.Net.Http.ObjectContent" />.Questa implementazione imposta l'intestazione Content-Type sul valore di mediaType se non è null.Se invece è null, imposta Content-Type sul media type predefinito del formattatore.Se nell'intestazione Content-Type non è specificato un set di caratteri, questo verrà impostato mediante l'istanza di <see cref="T:System.Text.Encoding" /> configurata per il formattatore.</summary>
      <param name="type">Tipo dell'oggetto sottoposto a serializzazione.Per ulteriori informazioni, vedere <see cref="T:System.Net.Http.ObjectContent" />.</param>
      <param name="headers">Intestazioni di contenuto che devono essere configurate.</param>
      <param name="mediaType">Media type autorevole.Può essere null.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings">
      <summary>Ottiene la raccolta modificabile delle codifiche di carattere supportate da <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>Raccolta di oggetti <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
      <summary>Ottiene la raccolta modificabile dei media type supportati da <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>Raccolta di oggetti <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Esegue la scrittura in modo asincrono di un oggetto del tipo specificato.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> che eseguirà la scrittura.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Valore dell'oggetto da scrivere.Può essere null.</param>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="transportContext">
        <see cref="T:System.Net.TransportContext" />, se disponibile.Può essere null.</param>
      <exception cref="T:System.NotSupportedException">I tipi derivati devono supportare la scrittura.</exception>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Esegue la scrittura in modo asincrono di un oggetto del tipo specificato.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> che eseguirà la scrittura.</returns>
      <param name="type">Tipo dell'oggetto da scrivere.</param>
      <param name="value">Valore dell'oggetto da scrivere.Può essere null.</param>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />, se disponibile.Può essere null.</param>
      <param name="transportContext">
        <see cref="T:System.Net.TransportContext" />, se disponibile.Può essere null.</param>
      <param name="cancellationToken">Token per annullare l'operazione.</param>
      <exception cref="T:System.NotSupportedException">I tipi derivati devono supportare la scrittura.</exception>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
      <summary> Classe Collection contenente istanze di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />.</summary>
      <param name="formatters">Raccolta di istanze di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> da inserire nella raccolta.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.AddRange(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Aggiunge gli elementi della raccolta specificata alla fine di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />.</summary>
      <param name="items">Elementi da aggiungere alla fine di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />. La raccolta di elementi non può essere <see cref="null" />, ma può contenere elementi <see cref="null" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.ClearItems">
      <summary>Rimuove tutti gli elementi dalla raccolta.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Helper per eseguire la ricerca in una raccolta di un formattatore in grado di leggere il tipo .NET nel mediaType specificato.</summary>
      <returns>Formattatore in grado di leggere il tipo. Null se la ricerca del formattatore ha esito negativo.</returns>
      <param name="type">Tipo .NET da leggere</param>
      <param name="mediaType">Media type su cui determinare la corrispondenza.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Helper per eseguire la ricerca in una raccolta di un formattatore in grado di scrivere il tipo .NET nel mediaType dato.</summary>
      <returns>Formattatore in grado di scrivere il tipo. Null se la ricerca del formattatore ha esito negativo.</returns>
      <param name="type">Tipo .NET da leggere</param>
      <param name="mediaType">Media type su cui determinare la corrispondenza.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
      <summary>Ottiene <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> da usare per i dati application/x-www-form-urlencoded.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" />da usare per i dati application/x-www-form-urlencoded.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.InsertItem(System.Int32,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Inserisce l'elemento specificato nell'indice specificato nella raccolta.</summary>
      <param name="index">Indice in cui effettuare l'inserimento.</param>
      <param name="item">Elemento da inserire.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inserisce gli elementi di una raccolta in <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero in corrispondenza del quale devono essere inseriti i nuovi elementi.</param>
      <param name="items">Elementi da inserire in <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />. La raccolta di elementi non può essere <see cref="null" />, ma può contenere elementi <see cref="null" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
      <summary>Restituisce true se si tratta di uno dei tipi definiti debolmente che devono essere esclusi dalla convalida.</summary>
      <returns>true se il tipo deve essere escluso. In caso contrario, false.</returns>
      <param name="type">
        <see cref="T:System.Type" /> .NET da convalidare.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
      <summary>Ottiene <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> da usare per JSON.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> da usare per JSON.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.RemoveItem(System.Int32)">
      <summary>Rimuove l'elemento all'indice specificato.</summary>
      <param name="index">Nome dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.SetItem(System.Int32,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Assegna l'elemento all'indice specificato nella raccolta.</summary>
      <param name="index">Indice in cui effettuare l'inserimento.</param>
      <param name="item">Elemento da assegnare.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
      <summary>Ottiene <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> da usare per XML.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> da usare per XML.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)"></member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatch">
      <summary> Questa classe descrive il grado di corrispondenza di un determinato oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> con una richiesta. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterMatch.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Nullable{System.Double},System.Net.Http.Formatting.MediaTypeFormatterMatchRanking)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />. </summary>
      <param name="formatter">Formattatore corrispondente.</param>
      <param name="mediaType">Media type.Può essere null. In tal caso, viene utilizzato il media type "application/octet-stream".</param>
      <param name="quality">Qualità della corrispondenza.Può essere null. In tal caso, la corrispondenza viene considerata completa con un valore pari a 1,0.</param>
      <param name="ranking">Tipo di corrispondenza.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Formatter">
      <summary> Ottiene il formattatore di media type. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.MediaType">
      <summary> Ottiene il media type corrispondente. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Quality">
      <summary> Ottiene la qualità della corrispondenza. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking">
      <summary> Ottiene il tipo di corrispondenza che si è verificata. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking">
      <summary> Contiene informazioni sul grado di corrispondenza di un oggetto <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> con le preferenze esplicite o implicite di una richiesta in ingresso. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType">
      <summary> Corrispondenza determinata per un tipo. Questo significa che il formattatore è in grado di serializzare il tipo.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderAllMediaRange">
      <summary>Corrispondenza determinata per un intervallo "*/*" esplicito nell'intestazione Accept.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderLiteral">
      <summary>Corrispondenza determinata per un'intestazione Accept letterale esplicita, ad esempio "application/json".</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderSubtypeMediaRange">
      <summary>Corrispondenza determinata per un intervallo di sottotipi esplicito in un'intestazione Accept, ad esempio "application/*".</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestMediaType">
      <summary> Corrispondenza determinata per il media type del corpo entità nel messaggio di richiesta HTTP.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestWithMediaTypeMapping">
      <summary> Corrispondenza determinata per <see cref="T:System.Net.Http.HttpRequestMessage" /> in seguito all'applicazione dei diversi oggetti <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.None">
      <summary> Nessuna corrispondenza trovata. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
      <summary> Classe di base astratta utilizzata per creare un'associazione tra le istanze di <see cref="T:System.Net.Http.HttpRequestMessage" /> o <see cref="T:System.Net.Http.HttpResponseMessage" /> che hanno determinate caratteristiche e uno specifico elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inizializza una nuova istanza di una classe <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> con il valore di mediaType specificato. </summary>
      <param name="mediaType"> Istanza di <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> associata alle istanze di <see cref="T:System.Net.Http.HttpRequestMessage" /> o <see cref="T:System.Net.Http.HttpResponseMessage" /> che hanno le caratteristiche specificate di <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
      <summary> Inizializza una nuova istanza di una classe <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> con il valore di mediaType specificato. </summary>
      <param name="mediaType"> Istanza di <see cref="T:System.String" /> associata alle istanze di <see cref="T:System.Net.Http.HttpRequestMessage" /> o <see cref="T:System.Net.Http.HttpResponseMessage" /> che hanno le caratteristiche specificate di <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
      <summary> Ottiene l'elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> associato alle istanze di <see cref="T:System.Net.Http.HttpRequestMessage" /> o <see cref="T:System.Net.Http.HttpResponseMessage" /> che hanno le caratteristiche specificate di <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Restituisce la qualità della corrispondenza dell'elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> associato alla richiesta. </summary>
      <returns>Qualità della corrispondenza.Il valore deve essere compreso tra 0,0 e 1,0.0,0 significa che non è presente alcuna corrispondenza.1,0 significa che la corrispondenza è completa.</returns>
      <param name="request"> Istanza di <see cref="T:System.Net.Http.HttpRequestMessage" /> da valutare per le caratteristiche associate a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> di <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="T:System.Net.Http.Formatting.QueryStringMapping">
      <summary> Classe che fornisce elementi <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> da stringhe di query. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />. </summary>
      <param name="queryStringParameterName">Nome del parametro della stringa di query per il quale determinare la corrispondenza, se presente.</param>
      <param name="queryStringParameterValue">Valore del parametro della stringa di query specificato da queryStringParameterName.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> da utilizzare se il parametro della query specificato da queryStringParameterName è presente e se a tale parametro è assegnato il valore specificato da queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />. </summary>
      <param name="queryStringParameterName">Nome del parametro della stringa di query per il quale determinare la corrispondenza, se presente.</param>
      <param name="queryStringParameterValue">Valore del parametro della stringa di query specificato da queryStringParameterName.</param>
      <param name="mediaType">Media type da utilizzare se il parametro della query specificato da queryStringParameterName è presente e se a tale parametro è assegnato il valore specificato da queryStringParameterValue.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
      <summary> Ottiene il nome del parametro della stringa di query. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
      <summary> Ottiene il valore del parametro della stringa di query. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Restituisce un valore che indica se l'istanza corrente di <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> può restituire un elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> dalla richiesta. </summary>
      <returns>Se questa istanza può generare un elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> dalla richiesta, restituisce 1,0. In caso contrario, restituisce 0,0.</returns>
      <param name="request">Classe <see cref="T:System.Net.Http.HttpRequestMessage" /> da controllare.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
      <summary>Questa classe fornisce il mapping tra un campo di intestazione di richiesta HTTP arbitrario e un elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> utilizzato per selezionare le istanze di <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> per la gestione del corpo entità di un oggetto <see cref="T:System.Net.Http.HttpRequestMessage" /> o <see cref="T:System.Net.Http.HttpResponseMessage" />.&lt;remarks&gt;Per determinare una corrispondenza, questa classe verifica solo i campi di intestazione associati a <see cref="M:HttpRequestMessage.Headers" />.Non controlla i campi di intestazione associati alle istanze di <see cref="M:HttpResponseMessage.Headers" /> o <see cref="M:HttpContent.Headers" />.&lt;/remarks&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />. </summary>
      <param name="headerName">Nome dell'intestazione per cui determinare la corrispondenza.</param>
      <param name="headerValue">Valore dell'intestazione per cui determinare la corrispondenza.</param>
      <param name="valueComparison">
        <see cref="T:System.StringComparison" /> da utilizzare per determinare la corrispondenza con headerValue.</param>
      <param name="isValueSubstring">se impostato su true, headerValue viene considerato corrispondente quando coincide con una sottostringa dell'effettivo valore dell'intestazione.</param>
      <param name="mediaType">
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> da utilizzare se headerName e headerValue vengono considerati corrispondenti.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />. </summary>
      <param name="headerName">Nome dell'intestazione per cui determinare la corrispondenza.</param>
      <param name="headerValue">Valore dell'intestazione per cui determinare la corrispondenza.</param>
      <param name="valueComparison">Confronto tra valori da utilizzare per determinare la corrispondenza con headerValue.</param>
      <param name="isValueSubstring">se impostato su true, headerValue viene considerato corrispondente quando coincide con una sottostringa dell'effettivo valore dell'intestazione.</param>
      <param name="mediaType">Media type da utilizzare se headerName e headerValue vengono considerati corrispondenti.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
      <summary> Ottiene il nome dell'intestazione per cui determinare la corrispondenza. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
      <summary> Ottiene il valore dell'intestazione per cui determinare la corrispondenza. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
      <summary> Ottiene l'istanza di <see cref="T:System.StringComparison" /> da utilizzare per determinare la corrispondenza con <see cref="M:HeaderValue" />. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
      <summary>Ottiene un valore che indica se <see cref="M:HeaderValue" /> corrisponde a una sottostringa dell'effettivo valore dell'intestazione.Questa istanza rappresenta la sottostringa del valore.</summary>
      <returns>true<see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue" />false</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Restituisce un valore che indica se l'istanza corrente di <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> può restituire un elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> dalla richiesta. </summary>
      <returns>Qualità della corrispondenza.Il valore deve essere compreso tra 0,0 e 1,0.0,0 significa che non è presente alcuna corrispondenza.1,0 significa che la corrispondenza è completa.</returns>
      <param name="request">Classe <see cref="T:System.Net.Http.HttpRequestMessage" /> da controllare.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping">
      <summary> Oggetto <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> che esegue il mapping del campo di intestazione HTTP X-Requested-With impostato da AJAX XmlHttpRequest (XHR) sul media type "application/json" se nella richiesta non sono presenti campi di intestazione Accept espliciti. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.#ctor">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Restituisce un valore che indica se l'istanza corrente di <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> può restituire un elemento <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> dalla richiesta. </summary>
      <returns>Qualità della corrispondenza.0,0 significa che non è presente alcuna corrispondenza.1,0 significa che la corrispondenza è completa e che la richiesta è stata effettuata utilizzando XmlHttpRequest senza un'intestazione Accept.</returns>
      <param name="request">Classe <see cref="T:System.Net.Http.HttpRequestMessage" /> da controllare.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
      <summary>Classe <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> per la gestione di Xml. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" />.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor(System.Net.Http.Formatting.XmlMediaTypeFormatter)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" />.</summary>
      <param name="formatter">Istanza <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> da cui copiare le impostazioni.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Esegue una query per determinare se <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> è in grado di deserializzare un oggetto del tipo specificato.</summary>
      <returns>true se <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> è in grado di deserializzare il tipo. In caso contrario, false.</returns>
      <param name="type">Tipo da deserializzare.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Esegue una query per determinare se <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> è in grado di serializzare un oggetto del tipo specificato.</summary>
      <returns>true se <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> è in grado di serializzare il tipo. In caso contrario, false.</returns>
      <param name="type">Tipo da serializzare.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateDataContractSerializer(System.Type)">
      <summary>Chiamato durante la deserializzazione per ottenere il serializzatore DataContractSerializer.</summary>
      <returns>Oggetto utilizzato per la serializzazione.</returns>
      <param name="type">Tipo di oggetto che verrà serializzato o deserializzato.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateXmlReader(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Chiamato durante la deserializzazione per ottenere il lettore XML da utilizzare per la lettura di oggetti dal flusso.</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> da utilizzare per la lettura degli oggetti.</returns>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> da cui leggere.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto letto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateXmlSerializer(System.Type)">
      <summary>Chiamato durante la deserializzazione per ottenere il serializzatore XML.</summary>
      <returns>Oggetto utilizzato per la serializzazione.</returns>
      <param name="type">Tipo di oggetto che verrà serializzato o deserializzato.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateXmlWriter(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Chiamato durante la serializzazione per ottenere il writer XML da utilizzare per la scrittura di oggetti al flusso.</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> da utilizzare per la scrittura degli oggetti.</returns>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> a cui scrivere.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto scritto.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
      <summary>Ottiene il media type predefinito per il formattatore XML.</summary>
      <returns>Media type predefinito, ovvero "application/xml".</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.GetDeserializer(System.Type,System.Net.Http.HttpContent)">
      <summary>Chiamato durante la deserializzazione per ottenere il serializzatore XML da utilizzare per la deserializzazione degli oggetti.</summary>
      <returns>Istanza di <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> oppure <see cref="T:System.Xml.Serialization.XmlSerializer" /> da utilizzare per deserializzare l'oggetto.</returns>
      <param name="type">Tipo di oggetto da deserializzare.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto letto.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.GetSerializer(System.Type,System.Object,System.Net.Http.HttpContent)">
      <summary>Chiamato durante la serializzazione per ottenere il serializzatore XML da utilizzare per la serializzazione degli oggetti.</summary>
      <returns>Istanza di <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> oppure <see cref="T:System.Xml.Serialization.XmlSerializer" /> da utilizzare per la serializzazione dell'oggetto.</returns>
      <param name="type">Tipo di oggetto da serializzare.</param>
      <param name="value">Oggetto da serializzare.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto scritto.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.Indent">
      <summary>Ottiene o imposta un valore che indica se impostare un rientro per gli elementi durante la scrittura di dati.</summary>
      <returns>true per impostare il rientro degli elementi. In caso contrario, false.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeCreateXmlReader(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Questo metodo supporta l'infrastruttura e non può essere utilizzato direttamente dal codice.</summary>
      <returns>Restituisce <see cref="T:System.Xml.XmlReader" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeCreateXmlWriter(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Questo metodo supporta l'infrastruttura e non può essere utilizzato direttamente dal codice.</summary>
      <returns>Restituisce <see cref="T:System.Xml.XmlWriter" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeGetDeserializer(System.Type,System.Net.Http.HttpContent)">
      <summary>Questo metodo supporta l'infrastruttura e non può essere utilizzato direttamente dal codice.</summary>
      <returns>Restituisce <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeGetSerializer(System.Type,System.Object,System.Net.Http.HttpContent)">
      <summary>Questo metodo supporta l'infrastruttura e non può essere utilizzato direttamente dal codice.</summary>
      <returns>Restituisce <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.MaxDepth">
      <summary>Ottiene e imposta il livello di annidamento massimo.</summary>
      <returns>Livello di annidamento massimo.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Chiamato durante la deserializzazione per leggere un oggetto del tipo specificato dall'oggetto readStream specificato. </summary>
      <returns>Istanza di <see cref="T:System.Threading.Tasks.Task" /> il cui risultato sarà costituito dall'istanza di oggetto letta.</returns>
      <param name="type">Tipo di oggetto da leggere.</param>
      <param name="readStream">
        <see cref="T:System.IO.Stream" /> da cui eseguire la lettura.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto letto.</param>
      <param name="formatterLogger">
        <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> per la registrazione degli eventi.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
      <summary>Annulla la registrazione del serializzatore attualmente associato al tipo specificato.</summary>
      <returns>true se per il tipo è stato precedentemente registrato un serializzatore. In caso contrario, false.</returns>
      <param name="type">Tipo di oggetto di cui deve essere rimosso il serializzatore.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registra un oggetto <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> per la lettura o la scrittura di oggetti di un tipo specificato.</summary>
      <param name="serializer">Istanza di <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">Tipo di oggetto che verrà serializzato o deserializzato con <paramref name="serializer" />.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registra un oggetto <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> per la lettura o la scrittura di oggetti di un tipo specificato.</summary>
      <param name="type">Tipo di oggetto che verrà serializzato o deserializzato con <paramref name="serializer" />.</param>
      <param name="serializer">Istanza di <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
      <summary>Registra un oggetto <see cref="T:System.Xml.Serialization.XmlSerializer" /> per la lettura o la scrittura di oggetti di un tipo specificato.</summary>
      <param name="type">Tipo di oggetto che verrà serializzato o deserializzato con <paramref name="serializer" />.</param>
      <param name="serializer">Istanza di <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Registra un oggetto <see cref="T:System.Xml.Serialization.XmlSerializer" /> per la lettura o la scrittura di oggetti di un tipo specificato.</summary>
      <param name="serializer">Istanza di <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
      <typeparam name="T">Tipo di oggetto che verrà serializzato o deserializzato con <paramref name="serializer" />.</typeparam>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseXmlSerializer">
      <summary>Ottiene o imposta un valore che indica se il formattatore XML utilizza <see cref="T:System.Xml.Serialization.XmlSerializer" /> anziché <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> come serializzatore predefinito.</summary>
      <returns>Se il valore è true, per impostazione predefinita il formattatore utilizza <see cref="T:System.Xml.Serialization.XmlSerializer" />. In caso contrario, utilizza <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriterSettings">
      <summary>Ottiene le impostazioni da utilizzare durante la scrittura.</summary>
      <returns>Impostazioni da utilizzare durante la scrittura.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Chiamato durante la serializzazione per scrivere un oggetto del tipo specificato nell'oggetto writeStream specificato.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> che scriverà il valore nel flusso.</returns>
      <param name="type">Tipo di oggetto da scrivere.</param>
      <param name="value">Oggetto da scrivere.</param>
      <param name="writeStream">
        <see cref="T:System.IO.Stream" /> in cui scrivere il contenuto.</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" /> per il contenuto scritto.</param>
      <param name="transportContext">Classe <see cref="T:System.Net.TransportContext" />.</param>
      <param name="cancellationToken">Token per monitorare l'annullamento.</param>
    </member>
    <member name="T:System.Net.Http.Handlers.HttpProgressEventArgs">
      <summary>Rappresenta gli argomenti degli eventi relativi allo stato di avanzamento HTTP.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.HttpProgressEventArgs.#ctor(System.Int32,System.Object,System.Int64,System.Nullable{System.Int64})">
      <summary> Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Handlers.HttpProgressEventArgs" />. </summary>
      <param name="progressPercentage">Percentuale di avanzamento.</param>
      <param name="userToken">Token utente.</param>
      <param name="bytesTransferred">Numero di byte trasferiti.</param>
      <param name="totalBytes">Numero totale di byte trasferiti.</param>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.BytesTransferred"></member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.TotalBytes"></member>
    <member name="T:System.Net.Http.Handlers.ProgressMessageHandler">
      <summary>Genera notifiche sullo stato di avanzamento sia per le entità richiesta caricate sia per le entità risposta scaricate.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" />.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" />.</summary>
      <param name="innerHandler">Gestore di messaggi interno.</param>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpReceiveProgress">
      <summary>Si verifica quando le entità evento vengono scaricate.</summary>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpSendProgress">
      <summary>Si verifica quando le entità evento vengono caricate.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpRequestProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Genera l'evento che gestisce la richiesta dello stato di avanzamento.</summary>
      <param name="request">Richiesta.</param>
      <param name="e">Gestore eventi da utilizzare per la richiesta.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpResponseProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Genera l'evento che gestisce la risposta dello stato di avanzamento.</summary>
      <param name="request">Richiesta.</param>
      <param name="e">Gestore eventi da utilizzare per la richiesta.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Invia il messaggio di stato specificato a un server HTTP per il recapito.</summary>
      <returns>Messaggio di stato inviato.</returns>
      <param name="request">Richiesta.</param>
      <param name="cancellationToken">Token di annullamento.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieHeaderValue">
      <summary>Fornisce un valore per l'intestazione Cookie.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</summary>
      <param name="name">Valore del nome.</param>
      <param name="values">Valori.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />.</summary>
      <param name="name">Valore del nome.</param>
      <param name="value">Valore.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.Clone">
      <summary>Crea una copia superficiale del valore del cookie.</summary>
      <returns>Copia superficiale del valore del cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Cookies">
      <summary>Ottiene una raccolta di cookie inviati dal client.</summary>
      <returns>Oggetto raccolta che rappresenta le variabili dei cookie del client.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Domain">
      <summary>Ottiene o imposta il dominio a cui associare il cookie.</summary>
      <returns>Nome del dominio a cui associare il cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Expires">
      <summary>Ottiene o imposta la data e l'ora di scadenza per il cookie.</summary>
      <returns>Ora di scadenza del cookie sul client.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.HttpOnly">
      <summary>Ottiene o imposta un valore che specifica se un cookie è accessibile da uno script sul lato client.</summary>
      <returns>true se il cookie possiede l'attributo HttpOnly e se non è possibile accedere ad esso tramite uno script sul lato client. In caso contrario, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Item(System.String)">
      <summary>Ottiene un collegamento alla proprietà del cookie.</summary>
      <returns>Valore del cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.MaxAge">
      <summary>Ottiene o imposta la durata massima consentita per una risorsa.</summary>
      <returns>Durata massima consentita per una risorsa.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Path">
      <summary>Ottiene o imposta il percorso virtuale da trasmettere con il cookie corrente.</summary>
      <returns>Percorso virtuale da trasmettere con il cookie corrente.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Secure">
      <summary>Ottiene o imposta un valore che indica se trasmettere il cookie mediante Secure Sockets Layer (SSL), ovvero solo tramite HTTPS.</summary>
      <returns>true per trasmettere il cookie tramite una connessione SSL (HTTPS). In caso contrario, false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.ToString">
      <summary>Restituisce una stringa che rappresenta l'oggetto corrente.</summary>
      <returns>Stringa che rappresenta l'oggetto corrente.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.TryParse(System.String,System.Net.Http.Headers.CookieHeaderValue@)">
      <summary>Indica un valore che indica se la rappresentazione stringa verrà convertita.</summary>
      <returns>true se la rappresentazione stringa verrà convertita. In caso contrario, false.</returns>
      <param name="input">Valore di input.</param>
      <param name="parsedValue">Valore analizzato da convertire.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieState">
      <summary>Contiene il nome del cookie e il relativo stato associato.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Headers.CookieState" />.</summary>
      <param name="name">Nome del cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Headers.CookieState" />.</summary>
      <param name="name">Nome del cookie.</param>
      <param name="values">Raccolta di coppie nome-valore per il cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Http.Headers.CookieState" />.</summary>
      <param name="name">Nome del cookie.</param>
      <param name="value">Valore del cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.Clone">
      <summary>Restituisce un nuovo oggetto che è una copia dell'istanza corrente.</summary>
      <returns>Nuovo oggetto che è una copia dell'istanza corrente.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Item(System.String)">
      <summary>Ottiene o imposta il valore del cookie con il nome specificato, se i dati del cookie sono strutturati.</summary>
      <returns>Valore del cookie con il nome specificato.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Name">
      <summary>Ottiene o imposta il nome del cookie.</summary>
      <returns>Nome del cookie.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.ToString">
      <summary>Restituisce la stringa che rappresenta l'oggetto corrente.</summary>
      <returns>Stringa che rappresenta l'oggetto corrente.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Value">
      <summary>Ottiene o imposta il valore del cookie, se i dati del cookie sono costituiti da un semplice valore stringa.</summary>
      <returns>Valore del cookie. </returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Values">
      <summary>Ottiene o imposta la raccolta di coppie nome-valore, se i dati del cookie sono strutturati.</summary>
      <returns>Raccolta di coppie nome-valore per il cookie.</returns>
    </member>
  </members>
</doc>